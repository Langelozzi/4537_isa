class Game {
    constructor(n, overlay) {
        this.SHUFFLE_INTERVAL_MS = 2000;
        this.DEFAULT_FIRST_CORRECT_BOX = 1;

        this.boxes = [];
        this.nextCorrectBox = this.DEFAULT_FIRST_CORRECT_BOX;

        this.overlay = overlay;
        this.n = n;
    }

    // Public methods
    async start() {
        this._addBoxes(this.n);
        await this._wait(this.n * MS_PER_SECOND);

        for (let i = 0; i < this.n; i++) {
            this._shuffleBoxes();

            if (i < this.n - 1) {
                await this._wait(this.SHUFFLE_INTERVAL_MS);
            }
        }

        this.boxes.forEach(box => {
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind
            box.registerClickEvent(this._onBoxClick.bind(this));
            box.enableClick();
            box.hideLabel();
        });
    }

    destroy() {
        this.overlay.hide();
        this.boxes.forEach(box => box.btn.remove());
        this.nextCorrectBox = this.DEFAULT_FIRST_CORRECT_BOX;
        this.boxes = [];
    }


    // Private methods
    _addBoxes(n) {
        const boxWidth = '10em';
        const boxHeight = '5em';

        const boxes = [];

        for (let i = 0; i < n; i++) {
            const box = new Box(this._getRandomColor(), boxWidth, boxHeight, null, null, i + 1)
            boxes.push(box);
        }

        this.boxes = boxes;
    }

    _shuffleBoxes() {
        this.boxes.forEach((box, index) => {
            const [top, left] = this._getRandomLocationInWindow(box);
            box.setLocation(`${top}px`, `${left}px`);
        });
    }

    _onBoxClick(box) {
        if (this.nextCorrectBox === box.order && this.nextCorrectBox === this.n) { // Last correct box clicked
            box.showLabel();
            this.nextCorrectBox++;

            this._endGame(Dictionary.Messages.WinMessage)
        } else if (this.nextCorrectBox === box.order) { // Correct box clicked
            box.showLabel();
            this.nextCorrectBox++;
        } else { // Incorrect box clicked
            this.boxes.forEach(box => box.showLabel());

            this._endGame(Dictionary.Messages.LoseMessage);
        }
    }

    _endGame(finalMessage) {
        this.boxes.forEach(box => box.disableClick());
        this.overlay.show(finalMessage);
    }

    // Helper methods
    _wait(ms) {
        // Solution generated by ChatGPT
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    _getRandomColor() {
        let color = '#';

        for (let i = 0; i < HEX_LENGTH; i++) {
            const letterIndex = Math.floor(Math.random() * HEX_BASE);
            color += HEX_LETTERS[letterIndex];
        }

        return color;
    }

    _getRandomLocationInWindow(box) {
        const width = window.innerWidth;
        const height = window.innerHeight;

        // Get the box's width and height
        const style = window.getComputedStyle(box.btn);
        const boxWidth = parseInt(style.width, DECIMAL_BASE);
        const boxHeight = parseInt(style.height, DECIMAL_BASE);

        // Subtract the box's width and height to ensure the box is fully visible
        const randomLeft = Math.floor(Math.random() * (width - boxWidth));
        const randomTop = Math.floor(Math.random() * (height - boxHeight));

        return [randomTop, randomLeft];
    }
}